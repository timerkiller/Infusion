package com.freer.infusion.model;

import com.freer.infusion.entity.SocketEntity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by 2172980000774 on 2016/5/17.
 */
public class SocketDataModel {

    private List<SocketEntity> mDataList;
    private Map<String, SocketEntity> mDataMap;

    public SocketDataModel() {
        mDataList = new ArrayList<>();
        mDataMap = new HashMap<>();
    }

    public void setData(List<SocketEntity> dataList) {
        for(SocketEntity fromS : dataList) {
            this.setData(fromS);
        }
    }

    /**
     * 更新数据
     * @param data
     */
    public void setData(SocketEntity data) {
        if (mDataMap.containsKey(data.UxName)) {
            if (data.WorkingState == SocketDataProcess.WORK_NO) {
                mDataMap.remove(data.UxName);
                return;
            }
            SocketEntity fromL = mDataMap.get(data.UxName);
            fromL.CurrSpeed = -1==data.CurrSpeed?fromL.CurrSpeed:data.CurrSpeed;
            fromL.TopLimitSpeed = -1==data.TopLimitSpeed?fromL.TopLimitSpeed:data.TopLimitSpeed;
            fromL.LowLimitSpeed = -1==data.LowLimitSpeed?fromL.LowLimitSpeed:data.LowLimitSpeed;
            fromL.ClientAction = -1==data.ClientAction?fromL.ClientAction:data.ClientAction;
            fromL.RealProcess = 0==data.RealProcess?fromL.RealProcess:data.RealProcess;
            fromL.WarnProcess = 0==data.WarnProcess?fromL.WarnProcess:data.WarnProcess;
            mDataMap.put(fromL.UxName, fromL);
        } else {
            mDataMap.put(data.UxName, data);
        }
    }

    /**
     * 更新数据，不添加新数据
     * @param data
     */
    public void setDataNoAdd(SocketEntity data) {
        //判断当前数据中如果已经含有这段数据，则更新
        if (mDataMap.containsKey(data.UxName)) {
            if (data.WorkingState == SocketDataProcess.WORK_NO) {
                mDataMap.remove(data.UxName);
                return;
            }
            SocketEntity fromL = mDataMap.get(data.UxName);
            fromL.CurrSpeed = -1==data.CurrSpeed?fromL.CurrSpeed:data.CurrSpeed;
            fromL.TopLimitSpeed = -1==data.TopLimitSpeed?fromL.TopLimitSpeed:data.TopLimitSpeed;
            fromL.LowLimitSpeed = -1==data.LowLimitSpeed?fromL.LowLimitSpeed:data.LowLimitSpeed;
            fromL.ClientAction = -1==data.ClientAction?fromL.ClientAction:data.ClientAction;
            fromL.RealProcess = 0==data.RealProcess?fromL.RealProcess:data.RealProcess;
            fromL.WarnProcess = 0==data.WarnProcess?fromL.WarnProcess:data.WarnProcess;
            mDataMap.put(fromL.UxName, fromL);
        }
    }

    public List<SocketEntity> getData() {
        //先清空一次list
        mDataList.clear();
        for (Map.Entry<String, SocketEntity> entry : mDataMap.entrySet()) {
//            if (entry.getValue().WorkingState == SocketDataProcess.WORK_NO) {
//                mDataMap.remove(entry.getKey());
//            } else {
//                mDataList.add(entry.getValue());
//            }
            mDataList.add(entry.getValue());
        }
        return mDataList;
    }
}
