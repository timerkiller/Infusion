package com.freer.infusion.model;

import android.util.Log;

import com.freer.infusion.config.AppConfig;
import com.freer.infusion.entity.DataEntity;
import com.freer.infusion.entity.SocketEntity;
import com.freer.infusion.util.JsonUtils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by 2172980000774 on 2016/5/17.
 */
public class SocketDataModel {

    private List<SocketEntity> mDataList;
    private Map<String, SocketEntity> mDataMap;

    public SocketDataModel() {
        mDataList = new ArrayList<>();
        mDataMap = new HashMap<>();
    }

    public void setData(List<SocketEntity> dataList) {
        this.setData(dataList, false);
    }

    public void setData(List<SocketEntity> dataList, boolean isFollow) {
        for (SocketEntity fromS : dataList) {
            this.setData(fromS, isFollow);
        }
    }

    /**
     * 更新数据
     * @param data
     */
    public void setData(SocketEntity data, boolean isFollow) {
        String bedId = String.valueOf(data.BedId);
        if (mDataMap.containsKey(data.UxName)) {
            if (data.WorkingState == SocketDataProcess.WORK_NO ||
                    data.WorkingState < 0 ||
                    data.WorkingState > 7) {
                mDataMap.remove(data.UxName);
                return;
            }
            if (followBed != null && followBed.size()!=0) {
                if (myBed != null && myBed.size()!=0) {
                    if (!followBed.containsKey(bedId)) {
                        if (myBed.containsKey(bedId)) {
                            if (isFollow &&
                                    (data.WorkingState == SocketDataProcess.WORK_BEGIN ||
                                        data.WorkingState == SocketDataProcess.WORK_NORMAL)) {
                                mDataMap.remove(data.UxName);
                                return;
                            }
                        } else {
                            mDataMap.remove(data.UxName);
                            return;
                        }
                    }
                } else {
                    if (!followBed.containsKey(bedId)) {
                        mDataMap.remove(data.UxName);
                        return;
                    }
                }
            } else {
                if (myBed != null && myBed.size()!=0) {
                    if (!myBed.containsKey(bedId)) {
                        mDataMap.remove(data.UxName);
                        return;
                    } else {
                        if (isFollow &&
                                (data.WorkingState == SocketDataProcess.WORK_BEGIN ||
                                    data.WorkingState == SocketDataProcess.WORK_NORMAL)) {
                            mDataMap.remove(data.UxName);
                            return;
                        }
                    }
                } else {
                    mDataMap.clear();
                    return;
                }
            }
            SocketEntity fromL = mDataMap.get(data.UxName);
            data.CurrSpeed = -1==data.CurrSpeed?fromL.CurrSpeed:data.CurrSpeed;
            data.TopLimitSpeed = -1==data.TopLimitSpeed?fromL.TopLimitSpeed:data.TopLimitSpeed;
            data.LowLimitSpeed = -1==data.LowLimitSpeed?fromL.LowLimitSpeed:data.LowLimitSpeed;
            data.ClientAction = -1==data.ClientAction?fromL.ClientAction:data.ClientAction;
            data.RealProcess = 0==data.RealProcess?fromL.RealProcess:data.RealProcess;
            data.WarnProcess = 0==data.WarnProcess?fromL.WarnProcess:data.WarnProcess;
            mDataMap.put(data.UxName, data);
        } else {
            if (data.WorkingState == SocketDataProcess.WORK_NO ||
                    data.WorkingState < 0 ||
                    data.WorkingState > 7) {
                return;
            }
            if (followBed != null && followBed.size()!=0) {
                if (myBed != null && myBed.size()!=0) {
                    if (!followBed.containsKey(bedId)) {
                        if (myBed.containsKey(bedId)) {
                            if (isFollow &&
                                    (data.WorkingState == SocketDataProcess.WORK_BEGIN ||
                                        data.WorkingState == SocketDataProcess.WORK_NORMAL)) {
                                return;
                            }
                        } else {
                            return;
                        }
                    }
                } else {
                    if (!followBed.containsKey(bedId)) {
                        return;
                    }
                }
            } else {
                if (myBed != null && myBed.size()!=0) {
                    if (!myBed.containsKey(bedId)) {
                        return;
                    } else {
                        if (isFollow &&
                                (data.WorkingState == SocketDataProcess.WORK_BEGIN ||
                                        data.WorkingState == SocketDataProcess.WORK_NORMAL)) {
                            return;
                        }
                    }
                } else {
                    mDataMap.clear();
                    return;
                }
            }
            data.CurrSpeed = -1==data.CurrSpeed?0:data.CurrSpeed;
            data.TopLimitSpeed = -1==data.TopLimitSpeed?0:data.TopLimitSpeed;
            data.LowLimitSpeed = -1==data.LowLimitSpeed?0:data.LowLimitSpeed;
            data.ClientAction = -1==data.ClientAction?0:data.ClientAction;
            mDataMap.put(data.UxName, data);
        }
    }

    /**
     * 更新数据，不添加新数据
     * @param data
     */
    public void setDataNoAdd(SocketEntity data) {
        //判断当前数据中如果已经含有这段数据，则更新
        if (mDataMap.containsKey(data.UxName)) {
            if (data.WorkingState == SocketDataProcess.WORK_NO) {
                mDataMap.remove(data.UxName);
                return;
            }
            SocketEntity fromL = mDataMap.get(data.UxName);
            fromL.CurrSpeed = -1==data.CurrSpeed?fromL.CurrSpeed:data.CurrSpeed;
            fromL.TopLimitSpeed = -1==data.TopLimitSpeed?fromL.TopLimitSpeed:data.TopLimitSpeed;
            fromL.LowLimitSpeed = -1==data.LowLimitSpeed?fromL.LowLimitSpeed:data.LowLimitSpeed;
            fromL.ClientAction = -1==data.ClientAction?fromL.ClientAction:data.ClientAction;
            fromL.RealProcess = 0==data.RealProcess?fromL.RealProcess:data.RealProcess;
            fromL.WarnProcess = 0==data.WarnProcess?fromL.WarnProcess:data.WarnProcess;
            mDataMap.put(fromL.UxName, fromL);
        }
    }

    public List<SocketEntity> getData() {
        //先清空一次list
        mDataList.clear();
        for (Map.Entry<String, SocketEntity> entry : mDataMap.entrySet()) {
//            String bedID = String.valueOf(entry.getValue().BedId);
//            if (!myBed.containsKey(bedID) &&
//                    !followBed.containsKey(bedID)) {
//            } else {
//                mDataList.add(entry.getValue());
//            }
            mDataList.add(entry.getValue());
        }
        return mDataList;
    }


    private HashMap<String, String> myBed;
    private HashMap<String, String> followBed;
    /**
     * 初步处理，筛选出我们选定的床位数据
     * @param message
     * @param isFollow
     */
    public void processData(String message, boolean isFollow) {

        DataEntity dataEntity = JsonUtils.fromJson(message, DataEntity.class);
        if (dataEntity == null || dataEntity.d == null) return;

        myBed = AppConfig.getInstance().getMyBed();
        followBed = AppConfig.getInstance().getFollowBed();

        AppConfig appConfig = AppConfig.getInstance();

        SocketEntity socketEntity = null;
        for(int index = 0; index < dataEntity.d.size(); index++) {
            socketEntity = dataEntity.d.get(index);

            // 根据最新数据和本地选定的床位，提示用户
            if (followBed != null && followBed.containsKey(String.valueOf(socketEntity.BedId)) ||
                    myBed != null && myBed.containsKey(String.valueOf(socketEntity.BedId))) {
                SocketDataProcess.notificate(socketEntity.WorkingState, appConfig);
            }
            setData(socketEntity, isFollow);
        }
    }
}
